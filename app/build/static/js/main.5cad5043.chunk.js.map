{"version":3,"sources":["assets/link.svg","assets/refresh.svg","components/rocket/Rocket.tsx","components/filter/Filter.tsx","models/Filter.tsx","components/header/Header.tsx","components/error/Error.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RocketComponent","props","className","alt","src","String","badge","name","type","Date","launchDate","toLocaleDateString","details","id","href","article","width","height","xlinkHref","linkIcon","FilterComponent","refresh","filters","setFilters","fetching","changeFilter","f","Object","assign","refreshIcon","onClick","Filter","landSuccess","reused","withReddit","HeaderComponent","ErrorComponent","role","aria-label","App","useState","rockets","setRockets","error","setError","useEffect","getData","getParams","enabled","keys","filter","key","params","forEach","x","reset","axios","get","then","d","data","sort","a","b","catch","err","length","Error","map","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cad5043.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/link.0ef6006d.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.a297dbf4.svg\";","import React from 'react';\nimport { Rocket } from '../../interfaces/Rocket';\nimport './Rocket.css';\nimport linkIcon from '../../assets/link.svg';\nimport '../../styles/sizers.css';\n\n/* equates to Row items of list */\nconst RocketComponent: React.FC<any> = (props: Rocket) => {\n  return (\n    <div className=\"rocket\">\n      <div className=\"small\">\n        <img alt=\"Badge\" src={String(props.badge)} className=\"badge\" />\n      </div>\n      <div className=\"medium\">{props.name}</div>\n      <div className=\"medium\">{props.type}</div>\n\n      <div className=\"medium\">{new Date(props.launchDate).toLocaleDateString()}</div>\n      <div className=\"large\">{props.details}</div>\n      <div className=\"small\">{props.id}</div>\n      <div className=\"small\">\n        <a href={String(props.article)}>\n          <svg width=\"15\" height=\"15\">\n            <image xlinkHref={linkIcon} height=\"15\" width=\"15\" />\n          </svg>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default RocketComponent;\n","import React from 'react';\r\nimport './Filter.css';\r\nimport refreshIcon from '../../assets/refresh.svg';\r\n\r\nconst FilterComponent: React.FC<any> = props => {\r\n  const { refresh, filters, setFilters, fetching } = props;\r\n\r\n  // On checkbox event, update parent filters obj\r\n  const changeFilter = (id: string) => {\r\n    const f = Object.assign({}, filters);\r\n    f[id] = !f[id];\r\n    setFilters(f);\r\n  };\r\n\r\n  return (\r\n    <div className='filter'>\r\n      <img src={refreshIcon} className={fetching ? 'fetching' : ''} onClick={() => refresh()} alt='Refresh' />\r\n      <div className='filler'></div>\r\n      <label>\r\n        Land Success\r\n        <input type='checkbox' onClick={() => changeFilter('landSuccess')} />\r\n        <span className='checkmark'></span>\r\n      </label>\r\n      <label>\r\n        Reused\r\n        <input type='checkbox' onClick={() => changeFilter('reused')} />\r\n        <span className='checkmark'></span>\r\n      </label>\r\n      <label>\r\n        With Reddit\r\n        <input type='checkbox' onClick={() => changeFilter('withReddit')} />\r\n        <span className='checkmark'></span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterComponent;\r\n","/* equates to checkboxes in FilterComponent */\r\nexport class Filter {\r\n  landSuccess = false;\r\n  reused = false;\r\n  withReddit = false;\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport '../../styles/sizers.css';\r\n\r\n/* forms header bar, aligns with RocketComponent(s) */\r\nconst HeaderComponent: React.FC<any> = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"small\">Badge</div>\r\n      <div className=\"medium\">Rocket Name</div>\r\n      <div className=\"medium\">Rocket Type</div>\r\n      <div className=\"medium\">Launch Date</div>\r\n      <div className=\"large\">Details</div>\r\n      <div className=\"small\">ID</div>\r\n      <div className=\"small\">Article</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderComponent;\r\n","import React from 'react';\r\n\r\n// Simple message that shows if failed to fetch rockets in AppComponent\r\nconst ErrorComponent: React.FC<any> = () => {\r\n  return (\r\n    <h1>\r\n      Failed To Fetch Rocket Data\r\n      <span role='img' aria-label='Dissapointed Face'>\r\n        ðŸ˜ž\r\n      </span>\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './styles/sizers.css';\n\nimport RocketComponent from './components/rocket/Rocket';\nimport { Rocket } from './interfaces/Rocket';\n\nimport FilterComponent from './components/filter/Filter';\nimport { Filter } from './models/Filter';\n\nimport HeaderComponent from './components/header/Header';\nimport ErrorComponent from './components/error/Error';\n\nimport axios from 'axios';\n\nconst HOST =\n  process.env.NODE_ENV === 'development' ? `http://localhost:3001` : 'https://robots-n-pencils.herokuapp.com';\n\nconst App: React.FC = () => {\n  // list of rockets, for RocketComponents\n  const [rockets, setRockets] = useState<Rocket[]>([]);\n  // if no data comes back from API\n  const [error, setError] = useState<boolean>(false);\n  // checkboxes in FilterComponent\n  const [filters, setFilters] = useState<Filter>(new Filter());\n\n  // get the data once the component mounts and draws (once)\n  useEffect(() => {\n    getData();\n  }, []);\n\n  // build params from enabled filters for call to API\n  const getParams = () => {\n    const enabled = Object.keys(filters).filter((key: keyof Filter) => filters[key] === true);\n    const params = {};\n    enabled.forEach(x => {\n      params[x] = x;\n    });\n    return params;\n  };\n\n  // call to API for list of rockets\n  const getData = () => {\n    reset();\n    axios\n      .get(`${HOST}/api/rap`, { params: getParams() })\n      .then(d => {\n        d.data.sort((a: Rocket, b: Rocket) => a.id - b.id);\n        setRockets(d.data);\n      })\n      .catch(err => setError(true));\n  };\n\n  // clear the list\n  const reset = () => {\n    setRockets([]);\n    setError(false);\n  };\n\n  return (\n    <div className='App'>\n      <h1>SpaceX Launches</h1>\n      <div className='container'>\n        <FilterComponent\n          fetching={!rockets.length && !error}\n          refresh={getData}\n          setFilters={setFilters}\n          filters={filters}\n        />\n        {rockets.length && <HeaderComponent />}\n        {error && <ErrorComponent />}\n        {!error && rockets.map((data: Rocket, i: number) => <RocketComponent key={i} {...data}></RocketComponent>)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}